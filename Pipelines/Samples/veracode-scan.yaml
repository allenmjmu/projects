parameters:
- name: SERVICE_NAME
  type: string
  default: '<name>'
- name: APP_DIR
  type: string
  defualt: '<name>/path'

variables:
- group: <ado variables group>
- template: ado-vars.yaml
- name: SERVICE_NAME
  value: ${{ parameters.SERVICE_NAME }}

trigger:
- none

schedules:
  - cron: "0 13 * * 6"
    displayName: Security Scans Saturday 1 PM UTC
    branches:
      include:
        - master

resources:
  repositories:
  - repository: self 

pool:
  name: $(agent pool)
  workspace:
   clean: all

stages:            
  - stage: "RunSecurityScans"
    jobs:
      - job: 'compile'
        variables:
          - template:
              ${{ parameters.APP_DIR }}ado-vars.yml@Self
        workspace:
          clean: all
        steps:
          - ${{ if eq(variables.CHECKOUT_INFRA_REPO, 'true') }}:
              - checkout: ${{ variables.INFRA_REPO }}
                path: 's/$(INFRA_REPO)'
          - bash: |
                  if [[ -z "$(DOCKER_TAG)" ]]; then
                    echo "This should set the APP_VERSION to be used throughout the pipeline"
                    edho "$(Build.SourceBranchName)-$(Build.BuildNumber)"
                    #YEAR=$(date +%Y)
                    #QUARTER='echo Q$(( ($(date +%-m)-1)/3+1 ))'
                    echo '##vso[task.setvariable variable=APP_VERSION]$(Build.SourceBranchName)-$(Build.BuildNumber)'
                  else
                    echo "Use DOCKER_TAG: $(DOCKER_TAG)"
                    echo '##vso[task.setvariable variable=APP_VERSION]$(DOCKER_TAG)'
                  fi
          - bash: |
                  echo "set REPO_NAME"
                  if [[ "#(build.Repository.Name)" == *"/"* ]]; then
                      echo "slash found"
                      echo "Azure Repo Name: $(build.Repository.Name)"
                      REPO=`echo $(build.Repository.Name) | awk -F"/" '{pringt $2}'`
                      echo "##vso[task.setvariable varibale=REPO_NAME]$REPO"
                      echo "REPO: ]$REPO"
                      echo "REPO_NAME: $(REPO_NAME)"
                      echo "Auzre Repo Name: $(build.Repository.Name)"
                      if [[ -z "$(INFRA_REPO)" ]]; then
                        echo "##vso[task.setvariable variable=INFRA_REPO]$REPO"
                      fi
                  else
                      echo "no slash found"
                      REPO="$(build.Repository.Name)"
                      echo "##vso[task.setvariable variable=REPO_NAME]$REPO"
                      if [[ -z "$(INFRA_REPO)" ]]; then
                        echo "##vso[task.setvariable variable=INFRA_REPO]$REPO"
                      fi
                      echo $REPO 
                      echo "Azure Repo Name: $(build.Repository.Name)"
                  fi
            displayName: Set REPO_NAME   
          - bash: |
                  if [[ -z "$(DOCKERFILE_PATH)" ]]; then 
                    echo '##vso[task.setvariable variable=DOCKERFILE_PATH]Dockerfile'
                  fi
            displayName: Set Dockerfile 
          - bash: |
                  if [[ -z "$(ARTIFACTORY_HOST)" ]]; then
                    echo '##vso[task.setvariable variable=ARTIFACTORY_HOST]<artifactory location>'
                  fi
          - bash: |
                  if [[ -z "$(DOCKER_CUSTOM_ARGUMENT)" ]]; then
                    echo '##vso[task.setvariable variable=[DOCKER_CUSTOM_ARGUMENT]--build-arg APP_VERSION=${APP_VERSION}'
          - checkout: self 
            path: 's/$(REPO_NAME)'
          - bash: echo $(Build.SourceBranchName)
          - ${{ if eq(variables.COMPILE_JOB, 'true') }}:
              - ${{ if eq(variable.BUILD_TYPE, 'maven') }}:
                  steps:
                    - task: Maven@3
                      inputs:
                        mavenPomFile: '$(Pipeline.Workspace)/s/$(REPO_NAME)/$APP_DIR)pom.xml'
                        goals: 'clean install -DskipTests=$(MAVEN_SKIP_TESTS)'
                        publishUnitResults: false
                        javaHomeOption: 'JDKVersion'
                        mavenVersionOption: 'Default'
                        mavenAuthenticationFeed: false
                        effectivePomSkip: false
                        sonarQubeRunAnalysis: false
                      displayName: 'Maven Install'
              - steps:
                  - task: PublishPipelineArtifact@1
                    displayName: 'Publish'
                    inputs:
                      targetPath: $(Pipeline.Workspace)/s/$(REPO_NAME)/$(APP_DIR)
                      artifactName: '$(SERVICE_NAME)-$(APP_VERSION)-drop'
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: $(SERVICE_NAME)-$(APP_VERSION)-drop
              path: $(Pipeline.Workspace)/s/$(REPO_NAME)/$(APP_DIR)
          - task: ArtifactoryDocker@1
            displayName: 'Artifactory Docker Pull'
            inputs:
              command: pull 
              artifactoryService: $(DOCKER_ARTIFACTORY_SERVICE_CONNECTION)
              sourceRepo: $(DOCKER_IMAGE_DEPENDENCY_REPO)
              imageName: $(ARTIFACTORY_DOCKER_REPO).$(ARTIFACTORY_DOCKER_REPO_PATH)/$(SERVICE_NAME):$(APP_VERSION)
          - script: |
              zip -v <name>.zip <path to zip>

          - task: Veracode@3
            inputs:
              ConnectionDetailsSelection: 'Endpoint'
              AnalysisService: '<veracode service connection'
              veracodeAppProfile: '<app profile>'
              version: '$(Build.BuildNumber)-<service name>'
              filepath: '$(Pipeline.Workspace)/s/<name>.zip'
              sandboxName: '<name>' 
              optargs:
                -selectdprevioulsy true 
                -deleteIncompleteScan 1
              importResults: false
              maximumWaitTime: '360'